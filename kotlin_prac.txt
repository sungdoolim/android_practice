Kotlin android


// 만들면 일단 ㅔ러부터 나는데...
gradle-wrapper.properties :
distributionUrl=https\://services.gradle.org/distributions/gradle-6.4.1-all.zip

이거 하고 ㅣㅇ크하면  되는데 ㅏㄴ되는척 함... 그냥 ㅣㄹ행 ㅣ켜봐


액션바 지우고 가쟈
manifest에 들어가서

        android:theme="@style/Theme.AppCompat.Light.NoActionBar"

Main : 
Main2 : intent/ toast
MAin3 : listview
Main4 : webview
Main5 : recyclerview



쉬운 화면 변경 navigation




버튼 색상이나 모양 설정 -> button태그의 backround를 사용하는데
버튼 뿐 아니라 다른 속성에도 사용 가능 -> 모양 / 색상 변경이 가능
<shape>
   <solid 
     android : color="@color/red"/>   // 색상 지정
   <corners
     android:radius="3dp"/>   // 모서리 모양
</shape>


 

뷰단 아이디를 정하면 findbiview이제는 필요 없음
바로 id.setText 가능

edittext : text로 안하고 hint로 !!! placehoder임


intent!!
bt.setonclic{ 
            var intent=Intent(this,Main2Activity::class.java)
            intent.putExtra("intentvalue","hi second?")
            startActivity(intent)
}
===>// 받는 곳에서 다시 intent 변수 선언 없이 사용 가능
            tv.text="secon"
            tv.text=intent.getStringExtra("intentvue")?:"null?"
          // null체크도 가능
           if(intent.hasExtra("intentvalue"){로도 가능하지만!}
 
intent 로 넘기고나서 다시 돌아올 것이 아니라면 startact이후에 finish()를 써주는게 좋음 자원 반납

imageview: src조작 하면 됨 drawable뭐시기..
버튼 내에서 
imgviewid.setImageResource(R.drawable.ic_launcher_foreground)
// 이미지 변경
배경 설정은 bacground속성 :
android:background="@drawable/android"
버튼에도 background주면 가능함


toast:
버튼 내에서 
Toast.makeText(this,"toast test",Toast.LENGTH_SHORT).show()
            




아이콘 받아오기!
직접 이미지 넣을수 있지만..
drawable->new->vectorasset->ClipArt->
여기서 menu모양 자주 ㅅ쓰일듯







----------------------------------------------------------------drawer 뷰 :
build.gradle : 에서 추가해야함
dependeicies안에다가
implementation 'com.google.android.material:material:1.0.0'
res->new->android resource directory -> resoure type=menu 생성
만든 폴더에 new -> menu resource file 생성(디자인 xml나옴)
<group android:checkableBehavior="single">
        <item android:id="@+id/access"
            android:icon="@drawable/ic_attach_money_black_24dp"
            android:title="show me the money"/>
 이 아이템들이 뜰꺼야

</group>
이런 식으로 그룹만들고 
사용할 item지정하는 것

그리고 메인에서는 
<androidx.drawerlayout.widget.DrawerLayout 이거로 바꿔야함
그리고 
메인xml에 
  <com.google.android.material.navigation.NavigationView
        android:layout_width="wrap_content"
        android:layout_height="match_parent"
        android:layout_gravity="start"
        app:menu="@menu/navi_menu"/>
이거 추가 : 여기서 menu라는건 만들어 놓은 xml이야
gravity는 버튼과 연결 했을때만 보이도록 하는 설정

이제 메인 에서
,NavigationView.OnNavigationItemSelectedListener  상속하고 override해야해

버튼 {
  layout_drawer.openDrawer(GravityCompat.START)// END는 오른쪽
}
        naviView.setNavigationItemSelectedListener (this)
// 온클릭 리스너 하려면 !! 즉 밑에 코드 실행하려면 이거 해야함

    override fun onNavigationItemSelected(item: MenuItem): Boolean {
 when(item.itemId){
            R.id.access-> Toast.makeText(~~~).show()
        }
        layout_drawer.closeDrawers()// 근데 이거 실행 안됨
        return false;
    }// 이 메서드가 override되는데 메뉴에서 아이템 누르면 실행 되는 onclic 메서드


  override fun onBackPressed() {
        if(layout_drawer.isDrawerOpen(GravityCompat.START)){
            layout_drawer.closeDrawers()
        }else{
            super.onBackPressed()
        }





바텀네비------------------------------------------------------------------------
 <com.google.android.material.bottomnavigation.BottomNavigationView
            android:layout_width="404dp"
            android:layout_height="276dp"
            app:layout_constraintBottom_toBottomOf="parent"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintHorizontal_bias="0.428"
            app:layout_constraintStart_toStartOf="parent"
            app:menu="@menu/bottomnavi_prac"/>
끝   



내부 db = preference Shard!!!
   fun saveData(){
    val pref=getSharedPreferences("pref",0)
    var edit=pref.edit()
        edit.putString("name","inner db test = prefS")
        edit.apply()
    }
    fun loadData(): String? {
        val pref=getSharedPreferences("pref",0)
        var str=pref.getString("name","defValue!!!!")
        return str
    }
// db table같은 역할 = pref
칼럼, session이름?? 그런 역할 =name



대망의 웹 뷰 
매니피스트에 인터넷 허용 해주고 밑에
        android:usesCleartextTraffic="true"   뭐하는 애인지는 잘 모름
  wv.settings.javaScriptEnabled=true
        wv.webViewClient= WebViewClient()
        wv.webChromeClient= WebChromeClient()
        wv.loadUrl("https://www.naver.com")
끝
onbackpressd 는 아까처럼 해주면 됨



listView 시작 

{

var item=arrayOf(3,5,"star",'q')

lv.adapter=ArrayAdapter <Any>(this, android.R.layout.simple_list_item_1, item)
간단한데??

리스트 부에 arrayList넣기
adapter를 바꿔야해!
val adpt=customAdpt(this,Userl)
 lv.adapter=adpt
// 메인은 간단

data class Users(var profile:Int,var name:String, var age:Int)
Users(R.drawable.ic_launcher_foreground,"hama",24) 
어레이 리스트는 oncreate전에 만들어 놔야해
//이미지 주소는 int형인가 보다

리스트를 담을 xml을 layout 밑에 새로 생성 해 줘야 해~
custom_lv로 하고  객체 만큼 뷰를 추가 하면 되 위에꺼는 img,text,text 뷰 로 구성되어있고 listview는 여기서 쓰는게 아니야

문제는 바로바로...
class customAdpt(val context: Context,val Userl:ArrayList<Users> ):BaseAdapter(){}
얘 오버라이드 하면 
   override fun getView(position: Int, convertView: View?, parent: ViewGroup?): View {
        val view:View =LayoutInflater.from(context).inflate(R.layout.custom_lv ,null)
// 이건 뭔소린지 모르겠는데 핵심인듯 해

        var age=Userl[position].age
        var vage=view.findViewById<TextView>(R.id.cusage)
        vage.text=age.toString()

        return view
    }
    override fun getItem(position: Int): Any {
        //TODO("Not yet implemented")
        return Userl[position]
    }이것도 리턴 중요!!  -  - 클릭 리스너에서 사용

 lv.onItemClickListener=AdapterView.OnItemClickListener{parent,view,position,id->
   val selItem=parent.getItemAtPosition(position) as Users         Toast.makeText(this,selItem.name,Toast.LENGTH_SHORT).show()
        }// 람다 식인것 같고 객체를 가져올수 있어!


} 




코루틴
val scope= CoroutineScope(Dispatcher.Default)
val A=scope.launch{}      -   반환 값 없음 	join
val B=scope.async{}       -   return 값이 있음	await






- 리스트 뷰 끝
그리드 뷰 경계 넣기           ......마헤다c gridclass_adapter참고               
android:horizontalSpacing="2dp"
  android:verticalSpacing="2dp"






recycler view....리스트 뷰 끝판{

메인[
rv_profile.layoutManager=LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false)
        rv_profile.setHasFixedSize(true)
        rv_profile.adapter=ProfilesAdapter(profileList)
]
[profilesadapter 일단 상속 : : RecyclerView.Adapter<ProfilesAdapter.CustomViewHolder>()
{
  override fun onCreateViewHolder( parent: ViewGroup,   viewType: Int): ProfilesAdapter.CustomViewHolder {
     val view=LayoutInflater.from(parent.context).inflate(R.layout.custom_rev,parent,false)
        return CustomViewHolder(view).apply {
            itemView.setOnClickListener {
                val curPos:Int=adapterPosition
                var profile:profiles=profileList.get(curPos)
                Toast.makeText(parent.context,"이름 :${profile.name}",Toast.LENGTH_SHORT).show()
            }
        }
    }

    override fun getItemCount(): Int {
        return profileList.size
    }

    override fun onBindViewHolder(holder: ProfilesAdapter.CustomViewHolder, position: Int) {


     holder.gender.setImageResource(profileList.get(position).gender)
        holder.name.text=profileList.get(position).name
        holder.age.text=profileList.get(position).age.toString()
        holder.job.text=profileList.get(position).job

    }



    class CustomViewHolder(itemView: View):RecyclerView.ViewHolder(itemView) {

        val gender=itemView.findViewById<ImageView>(R.id.iv_profile)
        val name=itemView.findViewById<TextView>(R.id.tv_name)
        val age=itemView.findViewById<TextView>(R.id.tv_age)
        val job=itemView.findViewById<TextView>(R.id.tv_job)


    }

}

]

}


mp3?

fragment?

public class frag1 : Fragment() {
    override fun onCreateView(        inflater: LayoutInflater,        container: ViewGroup?,        savedInstanceState: Bundle?    ):
            View? {
        var view= inflater.inflate(R.layout.frag1,container,false);
        val tv=view.findViewById<TextView>(R.id.textView1)    ///frag1에 ㅆ는 textView 이렇게 가져와야해
        val bt= view?.findViewById<Button>(R.id.fragbt1)       ///frag1에 ㅆ는 버튼이렇게 가져와야해

        if(arguments!=null){
            tv.text= arguments!!.getString("fromFrag2")     // 이게 데이터 받는거
        }
            bt!!.setOnClickListener(){     // 버튼누르면   frame전환 + 데이터 전송
                var bundle=Bundle()
                bundle.putString("fromFrag1","뭐죠 이건??? from frag1")
                val transaction= activity?.supportFragmentManager?.beginTransaction()
                var f2=frag2()
                f2.arguments=bundle
                transaction?.replace(R.id.framelayout,f2)
                transaction?.commit()
        }

        return view   //이건 frag1레이아웃 리턴하는거고

    }
}




alert?

db?


통신!!![[[[[[[[[[[[[


	@RequestMapping("/andtest")
	public @ResponseBody JSONObject andtest(String id,String pw) {
		System.out.println("getpw");
		System.out.println(id);System.out.println(pw);
			 JSONObject jsonMain = new JSONObject(); // json 객체
			 String pwd="1234";
			 jsonMain.put("Bpw", pwd);
			// System.out.println(pwd);		 
			return jsonMain;
	
	}

이거는 스프링



코틀린에서는 

data class PhotoModel (
    var Bid : String,
    var Bname : String,
    var Bpw : Int,
    var sendData:ArrayList<Any>  // 리스트 보내면 여기로 ㅏ더라고...

)

interface inter {
    @GET("/web/andtest.json")
    fun requestAllData(@Query("id") id:String="s",@Query("pw")pw:String="_pwd") : Call<PhotoModel>

    /*
    @POST(~/{id})
    @Query("id") id: String ="s"
     */
}
 fun f(){  // 하나의 객체만 받기
        var retrofit = Retrofit.Builder()
            .baseUrl("http://192.168.56.1:8052")
            .addConverterFactory(GsonConverterFactory.create())
            .build()
        val retrofitService = retrofit.create(inter::class.java)
        retrofitService.requestAllData().enqueue(object : Callback<PhotoModel> {
            override fun onResponse(call: Call<PhotoModel>, response: Response<PhotoModel>) {
                    val body = response.body()
// 여기 바디에는 photomodel이라는 객체가 있고 스프링에서 이름에 맞는 ㄷ이터가 들어가 있게됨
// 하나의 객체만 리턴 받음



                
                 }
            override fun onFailure(call: Call<PhotoModel>, t: Throwable) {
                Log.d("this is error",t.message)
            }
        })
    }}












스프링 :리스트 보내기
@RequestMapping("/androidtest")
	public @ResponseBody JSONObject andr(String id,String pw) {
		System.out.println("오오ㅗ오오오오ㅗ오오");
		System.out.println(id+","+pw);
        // json-simple 라이브러리 추가 필요(JSON 객체 생성)
        JSONObject jsonMain = new JSONObject(); // json 객체
        // {변수명:값, 변수명:값}
        // {sendData:[{변수명:값},{변수명:값},...]}
        List<BankVO> items = new ArrayList<>();
        JSONArray jArray = new JSONArray(); // json배열
        
        
    	for(int i=0;i<10;i++) {
    		BankVO vo=new BankVO();
			vo.setBid(""+i);
			vo.setBname("세종");
		
			items.add(vo);
		}
    	
    	
        for(int i=0; i<items.size(); i++){
        	BankVO dto = items.get(i);
            JSONObject row = new JSONObject();
            // json객체.put("변수명",값)
       
            row.put("f", dto.getBid());
            row.put("l", dto.getBname());
      
            // 배열에 추가
            // json배열.add(인덱스,json객체)
            jArray.add(i,row);
        }
        // json객체에 배열을 넣음
        jsonMain.put("sendData", jArray);
        return jsonMain;
	}


 fun f2(){
        var retrofit = Retrofit.Builder()
            .baseUrl("http://192.168.56.1:8052")
            .addConverterFactory(GsonConverterFactory.create())
            .build()
        val retrofitService = retrofit.create(inter2::class.java)
        retrofitService.requestAllData().enqueue(object : Callback<PhotoModel> {
            @RequiresApi(Build.VERSION_CODES.KITKAT)
            override fun onResponse(call: Call<PhotoModel>, response: Response<PhotoModel>) {

                if (response.isSuccessful) {

                    val body = response.body()
객체에  속성에 맞는 데이터가 올꺼야
근데 리스트 형식으로 오게 될꺼야 
즉 지금은 photomodel에 senddata라는 string에 json 리스트가 tostring형식으로 들어가있어
body는 photomodel객체 ㅎㅏ나이고


                    val jsonObj =  JSONObject.wrap(body?.sendData)
// 객체에서 sendData속성만 빼서 json형식을 유지시켜
                
                    val jArray = jsonObj as JSONArray
// 그걸 array로 만들어
       
                    var ptmp :PhotoModel
                    var tmpar= arrayListOf<PhotoModel>()
// 리스트 담을 그릇이지

                    for(i in 0..jArray.length()-1){
                        ptmp= PhotoModel(jArray.getJSONObject(i).getString("f"),jArray.getJSONObject(i).getString("l"),null,null)
                        tmpar.add(ptmp)
                    }
                    for(i in 0..tmpar.size-1){
                        println(tmpar.get(i).toString())
                    }
// 요래 보면 참 간단해 보이눈대
       }



룸 디비
room : sqlpllus 비슷한거
쓰려면 build.graddle :
apply plugin: 'kotlin-kapt'

   implementation 'androidx.room:room-runtime:2.1.0' 하고 
  implementation 대신 kapt 'androidx.room:room-compiler:2.1.0'

   val db= Room.databaseBuilder(
            applicationContext,
            Roomdb::class.java,"firstdb"
        ).allowMainThreadQueries().build()
 var str=db.userDao().getAll().toString();
        print(str)
db.userDao().insert(UserVO(insertroot.text.toString()))
메인에서는 ㅣ런식으로 사용

@Database(entities=arrayOf(UserVO::class),version=1)
abstract class Roomdb:RoomDatabase(){
    abstract fun userDao():UserDAO

}
@Dao
public interface UserDAO{
 @Query("select * from UserVO")
 fun getAll():List<UserVO>;
    @Insert
    fun insert(uservo:UserVO)
    @Update
    fun update(uservo:UserVO)
    @Delete
    fun delete(uservo:UserVO)


}
@Entity
data class UserVO(var title:String){
    @PrimaryKey(autoGenerate=true)
    var id:Int=0

    
}


livedata라는 게 있는대 trigger늒ㅁ이었어
@Query(“SELECT * FROM Users WHERE userid = :id”)
   protected abstract fun getUserById(id: String): LiveData<User>
이런식

@Query("select * from UserVO")
 fun getAll(): LiveData<List<UserVO>>;

  db.userDao().getAll().observe(this, Observer {
            //str=db.userDao().getAll().toString();
            str=it.toString()
            print(str)
        })



룸디비 이론적으로만....
{
2020 5월 기준
def room_version="2.2.5"
implementation "androidx.room:room-runtime:$room_version"
kapt "androidx.room:Room-compiler:$room_version"
//  위 코드랑 똑같네 버전만 변수에 넣은거고 
}
@Entity(tableName="memo")
data class Memo(
  @PrimaryKey(autoGenerate=true)
var id:Long?,         // 여기서 프라이머리키가 id로 설정된거야
var memo:String=""
)

@Dao
interface MemoDAO{
  @Insert(onConflict=REPLACE)
  fun insert(memo:MemoEntity)// MemoEntity는 위 Memo클래스의 kt이름

  @Query("select * from memo")
   fun getAll():List<MemoEntity>

   @Delete
   fun delete(memo:MemoEntity)
}



@Database(entities=arrayOf(MemoEntity::class),version=1)
abstract class MemoDatabase{
   abstract fun memoDAO():MemoDAO

   companion object{
       var INSTANCE:MemoDatabase?=null
       fun getInstance(context:Context) : MemoDatabase?{
             if(INSTANCE==null){ sysnchronized(MemoDatabase::class){ 
                              
                      INSTANCE=Room.dtabaseBuilder(context.applicationContext, 
                       MemoDatabase::class.java,"memo.db")
                        .fallbackToDestructiveMigration().build()

                       }
               } 
             return INSTANCE
        }
   }
}














비동기 : ㅗthread, async, coroutine
kotlim은 coroutine를 ㅏ용한다
build.gradle :
implementation androidx.lifecycle:lifecycle-runtime-ktx:2.2.0-alpha01

var j=lifecycleScope.launch(Dispatchers.IO) {
           print("1")
           db.userDao().insert(UserVO(insertroot.text.toString()))
           print("2")
       }
비동기 할 ㅓㅅ을 감싸면 ㅣㅁ





보이기/숨기기
designer_bt.visibility = View.VISIBLE;


그리드 뷰
일단 어뎁터가 필요 [ myhairdiary -> test/Grid_Test 참고]

비디오 틀기:
 var controller =  MediaController(this);
 test_image4.setMediaController(controller);
 test_image4.requestFocus();
var VIDEO_URL="https://firebasestorage.googleapis.com/v0/b/flut-template.appspot.com/o/images%2F1234%2F4?alt=media&"
        test_image4.setVideoURI(Uri.parse(VIDEO_URL));
test_image4.start()


스피너 : xml을 먼저  만들어야해
<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string-array name="gender">
        <item>""</item>
        <item>남</item>
        <item>여</item>
    </string-array>
</resources>
        <Spinner
            android:id="@+id/spin_gender"
            android:layout_width="110dp"
            android:layout_height="48dp"
            android:entries="@array/gender"    / xml의 이름으로 접근

 />

     spin_gender.onItemSelectedListener = object: AdapterView.OnItemSelectedListener {
            override fun onNothingSelected(parent: AdapterView<*>?) {
                gender=""

            }
            override fun onItemSelected(parent: AdapterView<*>?, view: View?, position: Int, id: Long) {
                println("position : ${position}+ id : ${id}")
                gender= spin_gender.selectedItem.toString() // 스피너는 요렇게 가져오는 구나
                println("gender = ${gender}")
            }
        }







firebase 

firebase: 
insert / create: 
    public fun createData( a:String, b:String){// 실제 되는거 확인 했음
        var userDTO=
            designer(a, 1, b, 1, "2", 3, "1")
        // 밑에 document를 공백으로 두면 임의의 아이디를 생성해서 추가함
        firestore?.collection("hair_diary")?.document()?.set(userDTO)
            .addOnCompleteListener {
                if(it.isSuccessful)
                    print("create성공")
            }
    }




select : 
    public fun readQueryWhereEqulToData(){
        println("read")
        firestore?.collection("hair_diary").whereEqualTo("email","서울").get()
            .addOnCompleteListener {
                if(it.isSuccessful){
                    for(dc in it.result!!.documents){
                        var userDTO =dc.toObject(designer::class.java)
                        println("success ${userDTO.toString()}")// 비동기식으로 되는건가봐 맨 마지막에 출력되네
                    }
                }else{
                    println("fail")
                }
            }
        println("read end")
    }



update: 
   public fun updateData(){// 잘됨
        var map= mutableMapOf<String,Any>()
        map["mail"] ="staris"
        firestore?.collection("baby").document("document1").update(map)
            .addOnCompleteListener {
                if(it.isSuccessful){
                    print("update")
                }
            }
    }


delete: 
    public fun deleteData() {// 잘됨
        firestore?.collection("baby").document("document1").delete()
            .addOnCompleteListener {
                if (it.isSuccessful) {
                    print("delete")
                }
            }
    }





glide : 
 Glide.with(context).load(designerList.get(position).drimgurl).into(holder.drvimg)// drvimg 는 이미지뷰







사진첩 열기 : 
    val GALLERY=0
 openAlbum()


    public fun openAlbum() {
        var intent = Intent(Intent.ACTION_PICK)
        intent.type = "*/*" 			///"image/*"

        val pref=getSharedPreferences("session",0)
        println("openalbum ${pref.getString("id","")}")
        startActivityForResult(intent, GALLERY)      // 얘는 특이해게 onActiviyResult로 가게 되는 것 같아
    }




  override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

   
        if(requestCode==GALLERY){
            var photoUri=data?.data!!
            album_imageview.setImageURI(photoUri) // 이미지 뷰에 선택한거 로드
        	uploadPhoto(photoUri)

            }

        }
    }




    fun uploadPhoto(photoUri: Uri) {

        var storageRef = FirebaseStorage.getInstance().reference.child("images")
        storageRef=storageRef.child(id).child("profile")


        storageRef.putFile(photoUri).addOnSuccessListener {
           storageRef.downloadUrl.addOnSuccessListener { uri->
   //	끝인디...?   그리고 여기서 얻어지는 uri로 진짜 firestorage에 접근 가능
           }

        }

    }









]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]

kotlin_prac 설명

1) APPBAR

layout/에 먼저 구성해서 꾸미기!
버튼들로 꾸미겠지??? 그리고 메인에 
    <include layout="@layout/appbar_prac"/> 붙이는거야!
여기서쓰인 ㅏ이디로 버튼 접근이 ㅏ능

2)drawer 

class MainActivity : AppCompatActivity(),NavigationView.OnNavigationItemSelectedListener 

전제조건 : 전체가 drawerlayout  - android:id="@+id/layout_drawer"
맨 밑에 포함되도록   <com.google.android.material.navigation.NavigationView
속성중에는
 android:id="@+id/naviView"
 app:menu="@menu/navi_menu"/>
메뉴에서는 그룹과 아이템으로!

@menu/navi_menu : 
    <group android:checkableBehavior="single">

        <item android:id="@+id/access"
            android:icon="@drawable/ic_attach_money_black_24dp"
            android:title="show me the money"/>

        <item android:id="@+id/email"
            android:icon="@drawable/ic_launcher_background"
            android:title="show me the money"/>

        <item android:id="@+id/message"
            android:icon="@drawable/ic_launcher_foreground"
            android:title="show me the money"/>
    </group>

여기서는 Imageview를 사용했음
        imageviewid.setOnClickListener{
            layout_drawer.openDrawer(GravityCompat.START)// END는 오른쪽
        }
 naviView.setNavigationItemSelectedListener (this) 

 override fun onNavigationItemSelected(item: MenuItem): Boolean {
        // 메서드가 통일 된것!!!!! drawer + bottomnavi
        when(item.itemId){
            R.id.access-> Toast.makeText(this,"접근",Toast.LENGTH_SHORT).show()
            R.id.email-> Toast.makeText(this,"메일",Toast.LENGTH_SHORT).show()
            R.id.message-> Toast.makeText(this,"문자",Toast.LENGTH_SHORT).show()

            R.id.num1->supportFragmentManager.beginTransaction().replace(R.id.framelayout, farg1()).commit()// fragment로 화면 전환 bottomnavi
            R.id.num2->supportFragmentManager.beginTransaction().replace(R.id.framelayout, frag2()).commit()

        }
        layout_drawer.closeDrawers()
        return false;

    }

3)bottom navi 

 얘 이벤트는 위 drawer와 같음!!
drawer와 마찬가지로 menu에 그룹과 아이템xml구성하고
메인 xml에 추가 :
<com.google.android.material.bottomnavigation.BottomNavigationView
 android:id="@+id/botnav"
 app:menu="@menu/bottomnavi_prac"/>
 botnav.setOnNavigationItemSelectedListener(this)
이벤트 메서드는 통일되어 관리됨 drawer

4)shared pref

버튼 :
  val intent=Intent(this,Main4Activity::class.java)
            val pref=getSharedPreferences("pref",0)
            var edit=pref.edit()
            edit.putString("name","inner db test = prefS from main 1")
            edit.apply()
            startActivity(intent)
        }
       val pref=getSharedPreferences("pref",0)
        var str=pref.getString("name","defValue!!!!")
        tv.setText(str)


5)recycler view

rec버튼임 -> 인텐트 전환
전환 된 곳에서
<androidx.recyclerview.widget.RecyclerView
                                                android:id="@+id/rv_profile"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />
layout안에 클래스를 넣을 디자인을 하기 custom_rev.xml

데이터 클래스인 profiles를 정의하고...VO()클래스지
그리고 ProfilesAdapter라는 클래스도 만들어야해

class ProfilesAdapter (val profileList:ArrayList<profiles>): RecyclerView.Adapter<ProfilesAdapter.CustomViewHolder>() {
    override fun onCreateViewHolder( parent: ViewGroup,   viewType: Int): ProfilesAdapter.CustomViewHolder {
     val view=LayoutInflater.from(parent.context).inflate(R.layout.custom_rev,parent,false)
        // 내가 쓸 custom_rev지정!
        return CustomViewHolder(view).apply {//이벤트
            itemView.setOnClickListener {
                val curPos:Int=adapterPosition
                var profile:profiles=profileList.get(curPos)
                Toast.makeText(parent.context,"이름 :${profile.name}",Toast.LENGTH_SHORT).show()
            }
        }

    }
    override fun getItemCount(): Int {
        return profileList.size
    }
    override fun onBindViewHolder(holder: ProfilesAdapter.CustomViewHolder, position: Int) {// 클래스의 변수명으로 접근
        holder.gender.setImageResource(profileList.get(position).gender)
        holder.name.text=profileList.get(position).name
        holder.age.text=profileList.get(position).age.toString()
        holder.job.text=profileList.get(position).job
    }
    class CustomViewHolder(itemView: View):RecyclerView.ViewHolder(itemView) {
        val gender=itemView.findViewById<ImageView>(R.id.iv_profile)
        val name=itemView.findViewById<TextView>(R.id.tv_name)
        val age=itemView.findViewById<TextView>(R.id.tv_age)
        val job=itemView.findViewById<TextView>(R.id.tv_job)
    }
}// 여기까지임!




 val profileList=arrayListOf(
            profiles(R.drawable.ic_launcher_foreground,"staris",25,"견습 웹/앱"),
            profiles(R.drawable.ic_launcher_foreground,"hama   ",23," 웹/앱"),
            profiles(R.drawable.ic_attach_money_black_24dp,"gagueng",22,"플루터"),
            profiles(R.drawable.ic_launcher_background,"sieun",21,"냐옹")
        )
rv_profile.layoutManager=
LinearLayoutManager(this,LinearLayoutManager.VERTICAL,false)
        rv_profile.setHasFixedSize(true)
        rv_profile.adapter=ProfilesAdapter(profileList)


6)roomdb

dao /vo 클래스 필요
@Dao
public interface UserDAO{  // 인터페이스로 현
 @Query("select * from UserVO")
 fun getAll(): LiveData<List<UserVO>>;
    @Insert
    fun insert(uservo:UserVO)
    @Update
    fun update(uservo:UserVO)
    @Delete
    fun delete(uservo:UserVO)
}

메인:

        val db= Room.databaseBuilder(
            applicationContext,
            Roomdb::class.java,"firstdb"
        ).build()


    roomdb.setOnClickListener(){ //버튼 
        //    println("???????????????????????????????????????????????????????????????")
       var j=lifecycleScope.launch(Dispatchers.IO) {

           db.userDao().insert(UserVO(insertroot.text.toString()))
//insertroot.text.toString() 얘는 eidttext가져온거 
       }



7)spring
interface inter2 {// /web/androidtest.json
    @GET("/web/androidtest.do")
    fun requestAllData(@Query("id") id:String="s",@Query("pw")pw:String="_pwd") : Call<PhotoModel>
//여기서는 보내고 받아오는 거구나!!   id와 pw를 보내는거야!!!
    /*
    @POST(~/{id})
    @Query("id") id: String ="s"
     */
}


 fun f2(){// 리스트를 받음
        var retrofit = Retrofit.Builder()
            .baseUrl("http://staris.freehongs.net")//http://192.168.56.1:8052
            .addConverterFactory(GsonConverterFactory.create())
            .build()
        val retrofitService = retrofit.create(inter2::class.java)//내가만든 inter2 클래스 사용
        retrofitService.requestAllData().enqueue(object : Callback<PhotoModel> {
            @RequiresApi(Build.VERSION_CODES.KITKAT)
            override fun onResponse(call: Call<PhotoModel>, response: Response<PhotoModel>) {
                println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~onresponse this is f2")
                if (response.isSuccessful) {
                    println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~onresponse success")

                    val body = response.body()
// 이게 단일 클래스를 받는거라면  print(body.toStirng())하면 끝!


                    //val jsonObj = JSONTokener(body.toString())
                    val jsonObj =  JSONObject.wrap(body?.sendData)
                    println("jsonobj:${jsonObj}")
                    val jArray = jsonObj as JSONArray
                    println(jArray.length())
                    var ptmp :PhotoModel
                    var tmpar= arrayListOf<PhotoModel>()
                    for(i in 0..jArray.length()-1){
                        ptmp= PhotoModel(jArray.getJSONObject(i).getString("f"),jArray.getJSONObject(i).getString("l"),null,null)
                        tmpar.add(ptmp)
                    }
                    for(i in 0..tmpar.size-1){
                        println(tmpar.get(i).toString())
                    }

                    body?.let {
                        //text_text.text = body.toString response 잘 받아왔는지 확인.
                        println(body.toString())
                        println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~onresponse    let")

                    }
                }
                else {
                    println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~onresponse   else")
                }
            }
            override fun onFailure(call: Call<PhotoModel>, t: Throwable) {
                println("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~fail f2")
                Log.d("this is error",t.message)
            }


        })
    }



8) firebase

 var firestore = FirebaseFirestore.getInstance()

 private fun createData(firestore:FirebaseFirestore){// 실제 되는거 확인 했음
        var userDTO= firevo("범석","서울")
        // 밑에 document를 공백으로 두면 임의의 아이디를 생성해서 추가함
        firestore?.collection("baby")?.document("document1")?.set(userDTO)
            .addOnCompleteListener {
                if(it.isSuccessful)
                    print("create성공")
            }
    }
    private fun readQueryWhereEqulToData(firestore:FirebaseFirestore){
        println("read")
        firestore?.collection("baby").whereEqualTo("email","서울").get()
            .addOnCompleteListener {
                if(it.isSuccessful){
                    for(dc in it.result!!.documents){
                        var userDTO =dc.toObject(firevo::class.java)
                        println("success ${userDTO.toString()}")// 비동기식으로 되는건가봐 맨 마지막에 출력되네
                    }
                }else{
                    println("fail")
                }
            }
        println("read end")
    // firestore?.collection("User").whereGreaterThan("age",9).get()
        //firestore?.collection("User").whereGreaterThanOrEqualTo("age", 9).get()
        // firestore?.collection("User").whereLessThan("age",9).get()
        //   firestore?.collection("User").whereLessThanOrEqualTo("age",9).get()

    }
    private fun updateData(firestore:FirebaseFirestore){// 잘됨
        var map= mutableMapOf<String,Any>()
        map["mail"] ="staris"
        firestore?.collection("baby").document("document1").update(map)
            .addOnCompleteListener {
                if(it.isSuccessful){
                    print("update")
                }
            }
    }
    private fun deleteData(firestore:FirebaseFirestore) {// 잘됨
        firestore?.collection("baby").document("document1").delete()
            .addOnCompleteListener {
                if (it.isSuccessful) {
                    print("delete")
                }
            }
    }



firestorage: 
app -> open module setting -> + ->lib -> glide -> github apply










참고목록 :